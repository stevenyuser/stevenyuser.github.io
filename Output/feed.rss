<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Steven Yu</title><description>Steven Yu's Personal Website ï½œ ä¿žè¶Šçš„ç½‘ç«™</description><link>https://stevenyuser.github.io</link><language>en</language><lastBuildDate>Wed, 22 Dec 2021 22:33:25 -0500</lastBuildDate><pubDate>Wed, 22 Dec 2021 22:33:25 -0500</pubDate><ttl>250</ttl><atom:link href="https://stevenyuser.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://stevenyuser.github.io/projects/peertutor</guid><title>PeerTutor</title><description>A SwiftUI application that allows students to tutor their peers.</description><link>https://stevenyuser.github.io/projects/peertutor</link><pubDate>Wed, 22 Dec 2021 22:33:16 -0500</pubDate><content:encoded><![CDATA[<h1>PeerTutor</h1><img src="https://stevenyuser.github.io/images/peertutor_banner.png" alt="PeerTutor"/><p><em>Background is from <a href="https://basicappleguy.com/basicappleblog/macosbliss">BasicAppleGuy</a></em></p><h2>Overview</h2><p>PeerTutor is an app that allows students to tutor their peers. Users create an account, request courses to get tutored (or tutor others) in, and then get automatically matched for a tutoring session that fits both tutor and tutee's schedule.</p><p>It's a pretty cool app if I may say so myself...</p><p>Building it was a pretty fun experience. I built it with (Paul Evans)[https://github.com/pevans927] and (Malcolm Krolick)[https://github.com/Mkrolick] and it was less chaotic than the last project we did together...</p><p>We custom built a Flask REST API that accessed data from the SQL database. It automatically performed the matching script (thanks Paul) and the data is fetched by the SwiftUI app. There's also a web app with an admin panel.</p><h2>Process</h2><p>My friends and I came up with this idea because I tutor some students in Chinese and Math and thought it would be pretty cool and useful to automate.</p><h3>Swift</h3><p>I did most of the Swift stuff. We used SwiftUI for the UI. SwiftUI is actually really fun to write with, the declarative nature cuts the development time down a lot. Doing this project really helped solidify my SwiftUI skills. :) I also used Combine to handle the asynchronous data (we are doing networking after all...) and used the (Networking Package)[https://github.com/freshOS/Networking] (highly recommend) to handle working with the JSON REST API. The networking part wasn't super bad, but dealing with user accounts and how to authenticate them was a headache the first time to say the least... Since this app didn't really have to deal with storage, at least I didn't have to mess with Core Data, but I did have to use UserDefaults to save the user's credentials on device.</p><p>Overall, Swift and SwiftUI are pretty fun. :D</p><p>(All the iOS source code is available here.)[https://github.com/VerseGroup/PeerTutor-ios]</p><h3>Flask</h3><p>Paul and Malcolm did most of the Python Flask stuff. There was a lot of back and forth on how models should be formatted and returned in JSON, but after that was done, the whole app was basically done. Also, I pushed for there to be clear documentation, because documentation is really important!!! Basically, we used Flask RESTful to make a REST API. We also used a SQL database, which makes sense for our project because we are dealing with lots of relationships (tutor to tutee, tutor tutoring what class, etc.) in PeerTutor.</p><h2>What's next?</h2><p>We're currently working on another app (stay tuned), but we definetely plan to revisit this project and completely rewrite it, so stay tuned...?</p>]]></content:encoded></item><item><guid isPermaLink="true">https://stevenyuser.github.io/posts/host-publish-with-github-pages</guid><title>How to Host Your Swift Publish Site with GitHub Pages</title><description>Learn how to host your Swift Publish site on GitHub Pages for free!</description><link>https://stevenyuser.github.io/posts/host-publish-with-github-pages</link><pubDate>Sun, 26 Sep 2021 16:35:00 -0400</pubDate><content:encoded><![CDATA[<h1>How to Host Your Swift Publish Site with GitHub Pages</h1><h2>Introduction</h2><p>Hi everyone! I finished building this personal site about a month ago and it took me a lot of struggles to make it, but it's finally done! In these few blog posts I'm making, I hope to help other Swift developers get their Swift Publish site up and running as painless as possible. After I made my site, a part I struggled on was hosting the site on GitHub Pages. Now, why would you want to host on GitHub Pages? Well, it comes with your GitHub account, it's free hosting, connected to your repository, and (after this tutorial) easy to use!</p><p>Before we start, the tutorial, please make sure you have installed the Publish Command Line Interface tool! <a href="https://github.com/JohnSundell/Publish">You can follow the instructions here, under Quick Start.</a></p><h2>Start the site</h2><p>First, create a new empty repo on GitHub and name it something like stevenyuser.github.io, which will be your default URL for your site (unless you want to have a custom domain, which you can learn more about here). Then, you have to clone the repo.</p><pre><code>$ git clone https://github.com/stevenyuser/stevenyuser.github.io.git
</code></pre><h3>WARNING: This will create an EMPTY repo!!!</h3><p>After cloning the repository, change your directory to that empty repo, and make sure to initialize it!</p><pre><code>$ cd stevenyuser.github.io
$ git init
</code></pre><p>The above code will initialize a master branch (necessary for GitHub Pages), this is where the generated content (HTML, CSS) will live. However, we want to make a new branch, where our Swift code that generates the website lives! We'll call the new branch author and switch to it, where we store the markdown files, themes, plugins, and other source code will live.</p><pre><code>$ git checkout -b author
</code></pre><p>Now, it's time to actually create the Publish project inside your repository and open it in Xcode.</p><pre><code>$ publish new
$ open Package.swift
</code></pre><p>Let's see if the site's up and running locally first at <a href="http://localhost:8000">http://localhost:8000</a>.</p><pre><code>$ publish run
</code></pre><p>Now, let's add it to GitHub Pages and make it visible to the whole world! Open main.swift under Sources -&gt; StevenyuserGithubIo and change it to this...</p><pre><code>...
try StevenyuserGithubIo().publish(
    ...
    deployedUsing: .gitHub("stevenyuser/stevenyuser.github.io", useSSH: false) // Add this!
)
...
</code></pre><p>This will make sure your code will deploy through GitHub pages. Now, time to deploy! This code will add all the changed files, commit and push to your repo, and then using the Publish CLI tool, deploy it to GitHub Pages.</p><pre><code>$ git add .
$ git commit -m "added stuff"
$ git push origin author
$ publish deploy
</code></pre><p>However, we are not yet finished!</p><h2>Make sure your site is being built through the master branch, where the generated content lives!</h2><p>We can do this by going to the repo settings. Then, going to the Pages tab. Under Source, make sure your GitHub Pages site is being built from the master branch and save.</p><h1>ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰</h1><h2>You are done! You have your very own Swift Publish site hosted for free on GitHub Pages, open to the web!</h2><h1>ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰</h1><h3>Additional helpful articles:</h3><p><a href="https://briancoyner.github.io/articles/2020-02-25-cocoaheads_publish_notes/ ">https://briancoyner.github.io/articles/2020-02-25-cocoaheads<em>publish</em>notes/</a> (English) <a href="https://www.fatbobman.com/posts/publish-1/">https://www.fatbobman.com/posts/publish-1/</a> (Chinese ä¸­æ–‡) <a href="https://www.fatbobman.com/posts/publish-2/">https://www.fatbobman.com/posts/publish-2/</a> (Chinese ä¸­æ–‡) <a href="https://www.fatbobman.com/posts/publish-3/">https://www.fatbobman.com/posts/publish-3/</a> (Chinese ä¸­æ–‡)</p>]]></content:encoded></item></channel></rss>